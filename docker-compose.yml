# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2022-2023 Dell Inc, or its subsidiaries.
---
version: '3.7'

services:
  spine1:
    image: quay.io/frrouting/frr:9.1.0
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
      - SYS_MODULE
      - CAP_NET_RAW
    stdin_open: true
    tty: true
    volumes:
      - ./conf/spine1.conf:/etc/frr/frr.conf
    networks:
      n1l1tos1:
        ipv4_address: 10.168.1.6
      n0l2tos1:
        ipv4_address: 10.168.2.6
      btos1:
        ipv4_address: 10.168.3.6
    command: |
      sh -x -c 'touch /etc/frr/vtysh.conf && \
            sed -i "s/bgpd=no/bgpd=yes/g" /etc/frr/daemons && \
            sed -i "s/127.0.0.1/0.0.0.0/g" /etc/frr/daemons && \
            ip link add name lo0 type dummy && \
            ifconfig lo0 10.0.0.1 netmask 255.255.255.255 up && \
            /etc/init.d/frr stop && \
            /usr/lib/frr/watchfrr -d -F traditional zebra bgpd staticd && \
            sleep infinity'

  leaf1:
    image: quay.io/frrouting/frr:9.1.0
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
      - SYS_MODULE
      - CAP_NET_RAW
    stdin_open: true
    tty: true
    volumes:
      - ./conf/leaf1.conf:/etc/frr/frr.conf
    ports:
      - "16686:16686"
      - "50151:50151"
      - "8082:8082"
    networks:
      n1l1tos1:
        ipv4_address: 10.168.1.5
      n2htoleaf1:
      n6h1tol1y:
    command: |
      sh -x -c 'touch /etc/frr/vtysh.conf && \
            sed -i "s/bgpd=no/bgpd=yes/g" /etc/frr/daemons && \
            sed -i "s/127.0.0.1/0.0.0.0/g" /etc/frr/daemons && \
            ip link add name lo0 type dummy && \
            ifconfig lo0 10.0.0.2 netmask 255.255.255.255 up && \
            /etc/init.d/frr stop && \
            /usr/lib/frr/watchfrr -d -F traditional zebra bgpd staticd && \
            sleep infinity'

  bleaf:
    image: quay.io/frrouting/frr:9.1.0
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
      - SYS_MODULE
      - CAP_NET_RAW
    stdin_open: true
    tty: true
    volumes:
      - ./conf/bleaf.conf:/etc/frr/frr.conf
    networks:
      btos1:
        ipv4_address: 10.168.3.5
      internet1:
        ipv4_address: 6.6.6.6
      internet2:
        ipv4_address: 7.7.7.7
    command: |
      sh -x -c 'touch /etc/frr/vtysh.conf && \
            sed -i "s/bgpd=no/bgpd=yes/g" /etc/frr/daemons && \
            sed -i "s/127.0.0.1/0.0.0.0/g" /etc/frr/daemons && \
            ip link add name lo0 type dummy && \
            ifconfig lo0 10.0.0.3 netmask 255.255.255.255 up && \

            ip link add green type vrf table 1001 && \
            ip link set green up && \
            ip link set eth1 master green && \

            ip link add yellow type vrf table 1002 && \
            ip link set yellow up && \
            ip link set eth2 master yellow && \

            ip link add br100 type bridge && \
            ip link set br100 master green addrgenmode none && \
            ip link set br100 addr aa:bb:cc:00:00:44 && \
            ip link add vni100 type vxlan local 10.0.0.3 dstport 4789 id 100 nolearning && \
            ip link set vni100 master br100 addrgenmode none && \
            ip link set vni100 type bridge_slave neigh_suppress on learning off && \
            ip link set vni100 up && \
            ip link set br100 up && \

            ip link add br101 type bridge && \
            ip link set br101 master yellow addrgenmode none && \
            ip link set br101 addr aa:bb:cc:00:00:55 && \
            ip link add vni101 type vxlan local 10.0.0.3 dstport 4789 id 101 nolearning && \
            ip link set vni101 master br101 addrgenmode none && \
            ip link set vni101 type bridge_slave neigh_suppress on learning off && \
            ip link set vni101 up && \
            ip link set br101 up && \

            /etc/init.d/frr stop && \
            /usr/lib/frr/watchfrr -d -F traditional zebra bgpd staticd && \
            sleep infinity'

  leaf2:
    image: quay.io/frrouting/frr:9.1.0
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
      - SYS_MODULE
      - CAP_NET_RAW
    stdin_open: true
    tty: true
    volumes:
      - ./conf/leaf2.conf:/etc/frr/frr.conf
    networks:
      n0l2tos1:
        ipv4_address: 10.168.2.5
      n2htoleaf2:
      n4htoleafbn2:
      n7htoleafbn2:
    command: |
      sh -x -c 'touch /etc/frr/vtysh.conf && \
            sed -i "s/bgpd=no/bgpd=yes/g" /etc/frr/daemons && \
            sed -i "s/127.0.0.1/0.0.0.0/g" /etc/frr/daemons && \
            ip link add name lo0 type dummy && \
            ifconfig lo0 10.0.0.4 netmask 255.255.255.255 up && \
            ip link add blue type vrf table 1000 && \
            ip link set blue up && \
            ip link add green type vrf table 1001 && \
            ip link set green up && \

            ip link add br10 type bridge && \
            ip link set br10 addr aa:bb:cc:00:00:22 && \
            ip link add link eth1 name eth1.10 type vlan id 10 && \
            ip link set eth1 up && ip addr flush dev eth1 && \
            ip link set eth1.10 up && \
            ip link set eth1.10 master br10 addrgenmode none && \
            ip link add vni10 type vxlan local 10.0.0.4 dstport 4789 id 10 nolearning && \
            ip link set vni10 master br10 addrgenmode none && \
            ip link set vni10 type bridge_slave neigh_suppress on learning off && \
            ip link set vni10 up && \
            ip link set br10 up && \

            ip link add br20 type bridge && \
            ip link set br20 master blue addrgenmode none && \
            ip link set br20 addr aa:bb:cc:00:00:23 && \
            ip addr add 20.20.20.1/24 dev br20 && \
            ip link add vni20 type vxlan local 10.0.0.4 dstport 4789 id 20 nolearning && \
            ip link set vni20 master br20 addrgenmode none && \
            ip link set vni20 type bridge_slave neigh_suppress on learning off && \
            ip link set vni20 up && \
            ip link set br20 up && \

            ip link add br30 type bridge && \
            ip link set br30 master blue addrgenmode none && \
            ip link set eth2 up && ip addr flush dev eth2 && \
            ip link add link eth2 name eth2.30 type vlan id 30 && \
            ip link set eth2.30 up && \
            ip link set eth2.30 master br30 addrgenmode none && \
            ip link set br30 addr aa:bb:cc:00:00:24 && \
            ip addr add 30.30.30.1/24 dev br30 && \
            ip link add vni30 type vxlan local 10.0.0.4 dstport 4789 id 30 nolearning && \
            ip link set vni30 master br30 addrgenmode none && \
            ip link set vni30 type bridge_slave neigh_suppress on learning off && \
            ip link set vni30 up && \
            ip link set br30 up && \

            ip link add br40 type bridge && \
            ip link set br40 master green addrgenmode none && \
            ip link set eth3 up && ip addr flush dev eth3 && \
            ip link add link eth3 name eth3.40 type vlan id 40 && \
            ip link set eth3.40 up && \
            ip link set eth3.40 master br40 addrgenmode none && \
            ip link set br40 addr aa:bb:cc:00:00:25 && \
            ip addr add 40.40.40.1/24 dev br40 && \
            ip link add vni40 type vxlan local 10.0.0.4 dstport 4789 id 40 nolearning && \
            ip link set vni40 master br40 addrgenmode none && \
            ip link set vni40 type bridge_slave neigh_suppress on learning off && \
            ip link set vni40 up && \
            ip link set br40 up && \

            /etc/init.d/frr stop && \
            /usr/lib/frr/watchfrr -d -F traditional zebra bgpd staticd && \
            sleep infinity'

  opi-evpn-bridge:
    build:
      context: .
    cap_add:
      - NET_ADMIN
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
    depends_on:
      leaf1:
        condition: service_started
      redis:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    network_mode: service:leaf1
    command: /opi-evpn-bridge -grpc_port=50151 -http_port=8082
    healthcheck:
      test: grpcurl -plaintext localhost:50151 list || exit 1

  jaeger:
    image: jaegertracing/all-in-one:1.52.0
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    network_mode: service:leaf1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "nc -zv localhost 4317 && nc -zv localhost 4318 || exit 1"
        ]
      interval: 6s
      retries: 5
      start_period: 20s
      timeout: 10s

  redis:
    image: redis:7.2.3-alpine3.18
    network_mode: service:leaf1
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]

  opi-gw-test:
    image: curlimages/curl:8.5.0
    network_mode: service:leaf1
    depends_on:
      opi-evpn-bridge:
        condition: service_healthy
    command: curl -qkL http://localhost:8082/v1/inventory/1/inventory/2

  opi-jaeger-test:
    image: curlimages/curl:8.5.0
    network_mode: service:leaf1
    depends_on:
      testgrpc:
        condition: service_completed_successfully # to get at least one operation registered in jaeger
    command: sh -c 'curl -s "http://localhost:16686/api/traces?service=opi-evpn-bridge&lookback=20m&prettyPrint=true&limit=10" | grep operationName'

  testgrpc:
    image: docker.io/namely/grpc-cli
    cap_add:
      - NET_ADMIN
    network_mode: service:leaf1
    depends_on:
      opi-evpn-bridge:
        condition: service_healthy
    entrypoint: /bin/bash
    command: |
      -x -c 'echo start && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.VrfService -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.VrfService.CreateVrf -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.VrfService.ListVrfs -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.VrfService.GetVrf -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.VrfService.DeleteVrf -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.VrfService.UpdateVrf -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.SviService -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.SviService.CreateSvi -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.SviService.ListSvis -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.SviService.GetSvi -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.SviService.DeleteSvi -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.SviService.UpdateSvi -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.CreateLogicalBridge -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.ListLogicalBridges -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.GetLogicalBridge -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.DeleteLogicalBridge -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.LogicalBridgeService.UpdateLogicalBridge -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.BridgePortService -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.BridgePortService.CreateBridgePort -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.BridgePortService.ListBridgePorts -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.BridgePortService.GetBridgePort -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.BridgePortService.DeleteBridgePort -l && \
      /entrypoint.sh ls localhost:50151 opi_api.network.evpn_gw.v1alpha1.BridgePortService.UpdateBridgePort -l && \
      echo toremove && \
      apt update && apt install iproute2 -y && \
      ip link add br-tenant type bridge vlan_default_pvid 0 vlan_filtering 1 vlan_protocol 802.1Q && \
      ip link set br-tenant up && \
      echo create && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateVrf            "{\"vrf_id\"            : \"blue\",          \"vrf\" :             {\"spec\" : {               \"loopback_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772418}, \"len\": 32}, \"vtep_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772162}, \"len\": 32} }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateVrf            "{\"vrf_id\"            : \"green\",         \"vrf\" :             {\"spec\" : {\"vni\" : 100, \"loopback_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772674}, \"len\": 32}, \"vtep_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772162}, \"len\": 32} }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateVrf            "{\"vrf_id\"            : \"yellow\",        \"vrf\" :             {\"spec\" : {\"vni\" : 101, \"loopback_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772930}, \"len\": 32}, \"vtep_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772162}, \"len\": 32} }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateLogicalBridge  "{\"logical_bridge_id\" : \"vlan10\",        \"logical_bridge\" :  {\"spec\" : {\"vni\" : 10, \"vlan_id\": 10, \"vtep_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772162}, \"len\": 24} }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateLogicalBridge  "{\"logical_bridge_id\" : \"vlan20\",        \"logical_bridge\" :  {\"spec\" : {\"vni\" : 20, \"vlan_id\": 20, \"vtep_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772162}, \"len\": 24} }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateLogicalBridge  "{\"logical_bridge_id\" : \"vlan30\",        \"logical_bridge\" :  {\"spec\" : {\"vni\" : 30, \"vlan_id\": 30, \"vtep_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772162}, \"len\": 24} }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateLogicalBridge  "{\"logical_bridge_id\" : \"vlan40\",        \"logical_bridge\" :  {\"spec\" : {\"vni\" : 40, \"vlan_id\": 40, \"vtep_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772162}, \"len\": 24} }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateLogicalBridge  "{\"logical_bridge_id\" : \"vlan50\",        \"logical_bridge\" :  {\"spec\" : {              \"vlan_id\": 50, \"vtep_ip_prefix\": {\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 167772162}, \"len\": 24} }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateSvi            "{\"svi_id\"            : \"blue-vlan20\",   \"svi\" :             {\"spec\" : {\"vrf\": \"//network.opiproject.org/vrfs/blue\",   \"logical_bridge\": \"//network.opiproject.org/bridges/vlan20\", \"mac_address\" : \"qrvMAAAh\", \"gw_ip_prefix\": [{\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 336860161}, \"len\": 24}] }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateSvi            "{\"svi_id\"            : \"blue-vlan30\",   \"svi\" :             {\"spec\" : {\"vrf\": \"//network.opiproject.org/vrfs/blue\",   \"logical_bridge\": \"//network.opiproject.org/bridges/vlan30\", \"mac_address\" : \"qrvMAAAx\", \"gw_ip_prefix\": [{\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 505290241}, \"len\": 24}] }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateSvi            "{\"svi_id\"            : \"green-vlan40\",  \"svi\" :             {\"spec\" : {\"vrf\": \"//network.opiproject.org/vrfs/green\",  \"logical_bridge\": \"//network.opiproject.org/bridges/vlan40\", \"mac_address\" : \"qrvMAABB\", \"gw_ip_prefix\": [{\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 673720321}, \"len\": 24}] }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateSvi            "{\"svi_id\"            : \"yellow-vlan50\", \"svi\" :             {\"spec\" : {\"vrf\": \"//network.opiproject.org/vrfs/yellow\", \"logical_bridge\": \"//network.opiproject.org/bridges/vlan50\", \"mac_address\" : \"qrvMAABR\", \"gw_ip_prefix\": [{\"addr\": {\"af\": \"IP_AF_INET\", \"v4_addr\": 842150405}, \"len\": 24}] }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateBridgePort     "{\"bridge_port_id\"    : \"eth1\",          \"bridge_port\" :     {\"spec\" : {\"mac_address\" : \"qrvMAAAB\", \"ptype\": \"BRIDGE_PORT_TYPE_TRUNK\",  \"logical_bridges\": [\"//network.opiproject.org/bridges/vlan10\", \"//network.opiproject.org/bridges/vlan20\", \"//network.opiproject.org/bridges/vlan40\"] }} }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 CreateBridgePort     "{\"bridge_port_id\"    : \"eth2\",          \"bridge_port\" :     {\"spec\" : {\"mac_address\" : \"qrvMAAAB\", \"ptype\": \"BRIDGE_PORT_TYPE_ACCESS\", \"logical_bridges\": [\"//network.opiproject.org/bridges/vlan50\"] }} }" && \
      echo get && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetVrf               "{\"name\" : \"//network.opiproject.org/vrfs/blue\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetVrf               "{\"name\" : \"//network.opiproject.org/vrfs/green\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetVrf               "{\"name\" : \"//network.opiproject.org/vrfs/yellow\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetLogicalBridge     "{\"name\" : \"//network.opiproject.org/bridges/vlan10\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetLogicalBridge     "{\"name\" : \"//network.opiproject.org/bridges/vlan20\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetLogicalBridge     "{\"name\" : \"//network.opiproject.org/bridges/vlan30\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetLogicalBridge     "{\"name\" : \"//network.opiproject.org/bridges/vlan40\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetLogicalBridge     "{\"name\" : \"//network.opiproject.org/bridges/vlan50\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetSvi               "{\"name\" : \"//network.opiproject.org/svis/blue-vlan20\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetSvi               "{\"name\" : \"//network.opiproject.org/svis/blue-vlan30\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetSvi               "{\"name\" : \"//network.opiproject.org/svis/green-vlan40\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetSvi               "{\"name\" : \"//network.opiproject.org/svis/yellow-vlan50\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetBridgePort        "{\"name\" : \"//network.opiproject.org/ports/eth1\" }" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 GetBridgePort        "{\"name\" : \"//network.opiproject.org/ports/eth2\" }" && \
      echo list && \
      /entrypoint.sh call --json_input --json_output localhost:50151 ListVrfs             "{}" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 ListLogicalBridges   "{}" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 ListSvis             "{}" && \
      /entrypoint.sh call --json_input --json_output localhost:50151 ListBridgePorts      "{}" && \
      echo done'

  host2-leaf2:
    image: docker.io/library/alpine:3.19
    cap_add:
      - NET_ADMIN
    networks:
      n2htoleaf2:
    # L2 VXLAN - VLAN10 stretched with VNI10 to leaf2 from leaf1 (ping 10.10.10.3)
    command: |
      sh -x -c 'ip link add link eth0 name eth0.10 type vlan id 10 && \
                ip link set eth0 up && ip addr flush dev eth0 && \
                ip link set eth0.10 up && \
                ip addr add 10.10.10.11/24 dev eth0.10 && sleep infinity'

  host3-leaf2:
    image: docker.io/library/alpine:3.19
    cap_add:
      - NET_ADMIN
    networks:
      n4htoleafbn2:
    command: |
      sh -x -c 'ip link add link eth0 name eth0.30 type vlan id 30 && \
                ip link set eth0 up && ip addr flush dev eth0 && \
                ip link set eth0.30 up && \
                ip addr add 30.30.30.31/24 dev eth0.30 &&
                ip route replace default via 30.30.30.1 && sleep infinity'
  host4-leaf2:
    image: docker.io/library/alpine:3.19
    cap_add:
      - NET_ADMIN
    networks:
      n7htoleafbn2:
    command: |
      sh -x -c 'ip link add link eth0 name eth0.40 type vlan id 40 && \
                ip link set eth0 up && ip addr flush dev eth0 && \
                ip link set eth0.40 up && \
                ip addr add 40.40.40.41/24 dev eth0.40 &&
                ip route replace default via 40.40.40.1 && sleep infinity'

  opi-test:
    image: docker.io/library/alpine:3.19
    cap_add:
      - NET_ADMIN
    networks:
      n2htoleaf1:
      n6h1tol1y:
    depends_on:
      spine1:
        condition: service_started
      leaf1:
        condition: service_started
      leaf2:
        condition: service_started
      bleaf:
        condition: service_started
      host2-leaf2:
        condition: service_started
      host3-leaf2:
        condition: service_started
      host4-leaf2:
        condition: service_started
      testgrpc:
        condition: service_completed_successfully
      opi-gw-test:
        condition: service_completed_successfully
      opi-jaeger-test:
        condition: service_completed_successfully
    # HOST1
    # L2 VXLAN - VLAN10 stretched with VNI10 to leaf2 from leaf1, ping Host2 IP from Host1
    # L3VXLAN Asymmetric IRB:
    #   VLAN20 & VLAN30 stretched with VNI20 & VNI30 repectively to leaf2 from leaf1 via blue VRF, ping Host3 IP from Host1
    # L3VXLAN Symmetric IRB:
    #   Ping to Bleaf internet connectivity IPs from Host1 via green and yellow VRFs from Leaf1
    command: |
      sh -x -c 'sleep 30 && \
                ip link add link eth0 name eth0.10 type vlan id 10 && \
                ip link set eth0 up && ip addr flush dev eth0 && \
                ip link set eth0.10 up && \
                ip addr add 10.10.10.10/24 dev eth0.10 && \
                sleep 5 && \
                ping -c 3 10.10.10.11 && \
                ip link add link eth0 name eth0.20 type vlan id 20 && \
                ip link set eth0.20 up && \
                ip addr add 20.20.20.20/24 dev eth0.20 && \
                ip rule add from 20.20.20.20 lookup 1000
                ip route add default via 20.20.20.1 dev eth0.20 table 1000
                sleep 5 && \
                ping -c 3 30.30.30.31 -I 20.20.20.20 && \
                ip link add link eth0 name eth0.40 type vlan id 40 && \
                ip link set eth0.40 up && \
                ip addr add 40.40.40.40/24 dev eth0.40 && \
                ip rule add from 40.40.40.40 lookup 1001
                ip route add default via 40.40.40.1 dev eth0.40 table 1001
                sleep 5 && \
                ping -c 3 6.6.6.6 -I 40.40.40.40 && ping -c 3 40.40.40.41 && \
                ip addr add 50.50.50.50/24 dev eth1 && \
                ip rule add from 50.50.50.50 lookup 1002
                ip route add default via 50.50.50.5 dev eth1 table 1002
                sleep 5 && \
                ping -c 3 7.7.7.7 -I 50.50.50.50'

networks:
  n1l1tos1:
    ipam:
      driver: default
      config:
        - subnet: 10.168.1.0/24

  n0l2tos1:
    ipam:
      driver: default
      config:
        - subnet: 10.168.2.0/24
  btos1:
    ipam:
      driver: default
      config:
        - subnet: 10.168.3.0/24

  internet1:
    ipam:
      driver: default
      config:
        - subnet: 6.6.6.0/24

  internet2:
    ipam:
      driver: default
      config:
        - subnet: 7.7.7.0/24

  n2htoleaf1:
    ipam:
      driver: default
      config:
        - subnet: 10.10.10.16/28

  n2htoleaf2:
    ipam:
      driver: default
      config:
        - subnet: 10.10.10.32/28

  n4htoleafbn2:
    ipam:
      driver: default
      config:
        - subnet: 30.30.30.0/24

  n6h1tol1y:
    ipam:
      driver: default
      config:
        - subnet: 50.50.50.0/24

  n7htoleafbn2:
    ipam:
      driver: default
      config:
        - subnet: 40.40.40.41/28
