// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2022-2023 Dell Inc, or its subsidiaries.

// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"

	netlink "github.com/vishvananda/netlink"
)

// Netlink is an autogenerated mock type for the Netlink type
type Netlink struct {
	mock.Mock
}

type Netlink_Expecter struct {
	mock *mock.Mock
}

func (_m *Netlink) EXPECT() *Netlink_Expecter {
	return &Netlink_Expecter{mock: &_m.Mock}
}

// AddrAdd provides a mock function with given fields: _a0, _a1, _a2
func (_m *Netlink) AddrAdd(_a0 context.Context, _a1 netlink.Link, _a2 *netlink.Addr) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link, *netlink.Addr) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_AddrAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddrAdd'
type Netlink_AddrAdd_Call struct {
	*mock.Call
}

// AddrAdd is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
//   - _a2 *netlink.Addr
func (_e *Netlink_Expecter) AddrAdd(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Netlink_AddrAdd_Call {
	return &Netlink_AddrAdd_Call{Call: _e.mock.On("AddrAdd", _a0, _a1, _a2)}
}

func (_c *Netlink_AddrAdd_Call) Run(run func(_a0 context.Context, _a1 netlink.Link, _a2 *netlink.Addr)) *Netlink_AddrAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link), args[2].(*netlink.Addr))
	})
	return _c
}

func (_c *Netlink_AddrAdd_Call) Return(_a0 error) *Netlink_AddrAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_AddrAdd_Call) RunAndReturn(run func(context.Context, netlink.Link, *netlink.Addr) error) *Netlink_AddrAdd_Call {
	_c.Call.Return(run)
	return _c
}

// AddrDel provides a mock function with given fields: _a0, _a1, _a2
func (_m *Netlink) AddrDel(_a0 context.Context, _a1 netlink.Link, _a2 *netlink.Addr) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link, *netlink.Addr) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_AddrDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddrDel'
type Netlink_AddrDel_Call struct {
	*mock.Call
}

// AddrDel is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
//   - _a2 *netlink.Addr
func (_e *Netlink_Expecter) AddrDel(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Netlink_AddrDel_Call {
	return &Netlink_AddrDel_Call{Call: _e.mock.On("AddrDel", _a0, _a1, _a2)}
}

func (_c *Netlink_AddrDel_Call) Run(run func(_a0 context.Context, _a1 netlink.Link, _a2 *netlink.Addr)) *Netlink_AddrDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link), args[2].(*netlink.Addr))
	})
	return _c
}

func (_c *Netlink_AddrDel_Call) Return(_a0 error) *Netlink_AddrDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_AddrDel_Call) RunAndReturn(run func(context.Context, netlink.Link, *netlink.Addr) error) *Netlink_AddrDel_Call {
	_c.Call.Return(run)
	return _c
}

// BridgeVlanAdd provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *Netlink) BridgeVlanAdd(_a0 context.Context, _a1 netlink.Link, _a2 uint16, _a3 bool, _a4 bool, _a5 bool, _a6 bool) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link, uint16, bool, bool, bool, bool) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_BridgeVlanAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BridgeVlanAdd'
type Netlink_BridgeVlanAdd_Call struct {
	*mock.Call
}

// BridgeVlanAdd is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
//   - _a2 uint16
//   - _a3 bool
//   - _a4 bool
//   - _a5 bool
//   - _a6 bool
func (_e *Netlink_Expecter) BridgeVlanAdd(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}) *Netlink_BridgeVlanAdd_Call {
	return &Netlink_BridgeVlanAdd_Call{Call: _e.mock.On("BridgeVlanAdd", _a0, _a1, _a2, _a3, _a4, _a5, _a6)}
}

func (_c *Netlink_BridgeVlanAdd_Call) Run(run func(_a0 context.Context, _a1 netlink.Link, _a2 uint16, _a3 bool, _a4 bool, _a5 bool, _a6 bool)) *Netlink_BridgeVlanAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link), args[2].(uint16), args[3].(bool), args[4].(bool), args[5].(bool), args[6].(bool))
	})
	return _c
}

func (_c *Netlink_BridgeVlanAdd_Call) Return(_a0 error) *Netlink_BridgeVlanAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_BridgeVlanAdd_Call) RunAndReturn(run func(context.Context, netlink.Link, uint16, bool, bool, bool, bool) error) *Netlink_BridgeVlanAdd_Call {
	_c.Call.Return(run)
	return _c
}

// BridgeVlanDel provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *Netlink) BridgeVlanDel(_a0 context.Context, _a1 netlink.Link, _a2 uint16, _a3 bool, _a4 bool, _a5 bool, _a6 bool) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link, uint16, bool, bool, bool, bool) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_BridgeVlanDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BridgeVlanDel'
type Netlink_BridgeVlanDel_Call struct {
	*mock.Call
}

// BridgeVlanDel is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
//   - _a2 uint16
//   - _a3 bool
//   - _a4 bool
//   - _a5 bool
//   - _a6 bool
func (_e *Netlink_Expecter) BridgeVlanDel(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}) *Netlink_BridgeVlanDel_Call {
	return &Netlink_BridgeVlanDel_Call{Call: _e.mock.On("BridgeVlanDel", _a0, _a1, _a2, _a3, _a4, _a5, _a6)}
}

func (_c *Netlink_BridgeVlanDel_Call) Run(run func(_a0 context.Context, _a1 netlink.Link, _a2 uint16, _a3 bool, _a4 bool, _a5 bool, _a6 bool)) *Netlink_BridgeVlanDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link), args[2].(uint16), args[3].(bool), args[4].(bool), args[5].(bool), args[6].(bool))
	})
	return _c
}

func (_c *Netlink_BridgeVlanDel_Call) Return(_a0 error) *Netlink_BridgeVlanDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_BridgeVlanDel_Call) RunAndReturn(run func(context.Context, netlink.Link, uint16, bool, bool, bool, bool) error) *Netlink_BridgeVlanDel_Call {
	_c.Call.Return(run)
	return _c
}

// LinkAdd provides a mock function with given fields: _a0, _a1
func (_m *Netlink) LinkAdd(_a0 context.Context, _a1 netlink.Link) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_LinkAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkAdd'
type Netlink_LinkAdd_Call struct {
	*mock.Call
}

// LinkAdd is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
func (_e *Netlink_Expecter) LinkAdd(_a0 interface{}, _a1 interface{}) *Netlink_LinkAdd_Call {
	return &Netlink_LinkAdd_Call{Call: _e.mock.On("LinkAdd", _a0, _a1)}
}

func (_c *Netlink_LinkAdd_Call) Run(run func(_a0 context.Context, _a1 netlink.Link)) *Netlink_LinkAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link))
	})
	return _c
}

func (_c *Netlink_LinkAdd_Call) Return(_a0 error) *Netlink_LinkAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_LinkAdd_Call) RunAndReturn(run func(context.Context, netlink.Link) error) *Netlink_LinkAdd_Call {
	_c.Call.Return(run)
	return _c
}

// LinkByName provides a mock function with given fields: _a0, _a1
func (_m *Netlink) LinkByName(_a0 context.Context, _a1 string) (netlink.Link, error) {
	ret := _m.Called(_a0, _a1)

	var r0 netlink.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (netlink.Link, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) netlink.Link); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(netlink.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Netlink_LinkByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkByName'
type Netlink_LinkByName_Call struct {
	*mock.Call
}

// LinkByName is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *Netlink_Expecter) LinkByName(_a0 interface{}, _a1 interface{}) *Netlink_LinkByName_Call {
	return &Netlink_LinkByName_Call{Call: _e.mock.On("LinkByName", _a0, _a1)}
}

func (_c *Netlink_LinkByName_Call) Run(run func(_a0 context.Context, _a1 string)) *Netlink_LinkByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Netlink_LinkByName_Call) Return(_a0 netlink.Link, _a1 error) *Netlink_LinkByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Netlink_LinkByName_Call) RunAndReturn(run func(context.Context, string) (netlink.Link, error)) *Netlink_LinkByName_Call {
	_c.Call.Return(run)
	return _c
}

// LinkDel provides a mock function with given fields: _a0, _a1
func (_m *Netlink) LinkDel(_a0 context.Context, _a1 netlink.Link) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_LinkDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkDel'
type Netlink_LinkDel_Call struct {
	*mock.Call
}

// LinkDel is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
func (_e *Netlink_Expecter) LinkDel(_a0 interface{}, _a1 interface{}) *Netlink_LinkDel_Call {
	return &Netlink_LinkDel_Call{Call: _e.mock.On("LinkDel", _a0, _a1)}
}

func (_c *Netlink_LinkDel_Call) Run(run func(_a0 context.Context, _a1 netlink.Link)) *Netlink_LinkDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link))
	})
	return _c
}

func (_c *Netlink_LinkDel_Call) Return(_a0 error) *Netlink_LinkDel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_LinkDel_Call) RunAndReturn(run func(context.Context, netlink.Link) error) *Netlink_LinkDel_Call {
	_c.Call.Return(run)
	return _c
}

// LinkModify provides a mock function with given fields: _a0, _a1
func (_m *Netlink) LinkModify(_a0 context.Context, _a1 netlink.Link) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_LinkModify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkModify'
type Netlink_LinkModify_Call struct {
	*mock.Call
}

// LinkModify is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
func (_e *Netlink_Expecter) LinkModify(_a0 interface{}, _a1 interface{}) *Netlink_LinkModify_Call {
	return &Netlink_LinkModify_Call{Call: _e.mock.On("LinkModify", _a0, _a1)}
}

func (_c *Netlink_LinkModify_Call) Run(run func(_a0 context.Context, _a1 netlink.Link)) *Netlink_LinkModify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link))
	})
	return _c
}

func (_c *Netlink_LinkModify_Call) Return(_a0 error) *Netlink_LinkModify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_LinkModify_Call) RunAndReturn(run func(context.Context, netlink.Link) error) *Netlink_LinkModify_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetDown provides a mock function with given fields: _a0, _a1
func (_m *Netlink) LinkSetDown(_a0 context.Context, _a1 netlink.Link) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_LinkSetDown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetDown'
type Netlink_LinkSetDown_Call struct {
	*mock.Call
}

// LinkSetDown is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
func (_e *Netlink_Expecter) LinkSetDown(_a0 interface{}, _a1 interface{}) *Netlink_LinkSetDown_Call {
	return &Netlink_LinkSetDown_Call{Call: _e.mock.On("LinkSetDown", _a0, _a1)}
}

func (_c *Netlink_LinkSetDown_Call) Run(run func(_a0 context.Context, _a1 netlink.Link)) *Netlink_LinkSetDown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link))
	})
	return _c
}

func (_c *Netlink_LinkSetDown_Call) Return(_a0 error) *Netlink_LinkSetDown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_LinkSetDown_Call) RunAndReturn(run func(context.Context, netlink.Link) error) *Netlink_LinkSetDown_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetHardwareAddr provides a mock function with given fields: _a0, _a1, _a2
func (_m *Netlink) LinkSetHardwareAddr(_a0 context.Context, _a1 netlink.Link, _a2 net.HardwareAddr) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link, net.HardwareAddr) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_LinkSetHardwareAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetHardwareAddr'
type Netlink_LinkSetHardwareAddr_Call struct {
	*mock.Call
}

// LinkSetHardwareAddr is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
//   - _a2 net.HardwareAddr
func (_e *Netlink_Expecter) LinkSetHardwareAddr(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Netlink_LinkSetHardwareAddr_Call {
	return &Netlink_LinkSetHardwareAddr_Call{Call: _e.mock.On("LinkSetHardwareAddr", _a0, _a1, _a2)}
}

func (_c *Netlink_LinkSetHardwareAddr_Call) Run(run func(_a0 context.Context, _a1 netlink.Link, _a2 net.HardwareAddr)) *Netlink_LinkSetHardwareAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link), args[2].(net.HardwareAddr))
	})
	return _c
}

func (_c *Netlink_LinkSetHardwareAddr_Call) Return(_a0 error) *Netlink_LinkSetHardwareAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_LinkSetHardwareAddr_Call) RunAndReturn(run func(context.Context, netlink.Link, net.HardwareAddr) error) *Netlink_LinkSetHardwareAddr_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetMaster provides a mock function with given fields: _a0, _a1, _a2
func (_m *Netlink) LinkSetMaster(_a0 context.Context, _a1 netlink.Link, _a2 netlink.Link) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link, netlink.Link) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_LinkSetMaster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetMaster'
type Netlink_LinkSetMaster_Call struct {
	*mock.Call
}

// LinkSetMaster is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
//   - _a2 netlink.Link
func (_e *Netlink_Expecter) LinkSetMaster(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Netlink_LinkSetMaster_Call {
	return &Netlink_LinkSetMaster_Call{Call: _e.mock.On("LinkSetMaster", _a0, _a1, _a2)}
}

func (_c *Netlink_LinkSetMaster_Call) Run(run func(_a0 context.Context, _a1 netlink.Link, _a2 netlink.Link)) *Netlink_LinkSetMaster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link), args[2].(netlink.Link))
	})
	return _c
}

func (_c *Netlink_LinkSetMaster_Call) Return(_a0 error) *Netlink_LinkSetMaster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_LinkSetMaster_Call) RunAndReturn(run func(context.Context, netlink.Link, netlink.Link) error) *Netlink_LinkSetMaster_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetNoMaster provides a mock function with given fields: _a0, _a1
func (_m *Netlink) LinkSetNoMaster(_a0 context.Context, _a1 netlink.Link) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_LinkSetNoMaster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetNoMaster'
type Netlink_LinkSetNoMaster_Call struct {
	*mock.Call
}

// LinkSetNoMaster is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
func (_e *Netlink_Expecter) LinkSetNoMaster(_a0 interface{}, _a1 interface{}) *Netlink_LinkSetNoMaster_Call {
	return &Netlink_LinkSetNoMaster_Call{Call: _e.mock.On("LinkSetNoMaster", _a0, _a1)}
}

func (_c *Netlink_LinkSetNoMaster_Call) Run(run func(_a0 context.Context, _a1 netlink.Link)) *Netlink_LinkSetNoMaster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link))
	})
	return _c
}

func (_c *Netlink_LinkSetNoMaster_Call) Return(_a0 error) *Netlink_LinkSetNoMaster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_LinkSetNoMaster_Call) RunAndReturn(run func(context.Context, netlink.Link) error) *Netlink_LinkSetNoMaster_Call {
	_c.Call.Return(run)
	return _c
}

// LinkSetUp provides a mock function with given fields: _a0, _a1
func (_m *Netlink) LinkSetUp(_a0 context.Context, _a1 netlink.Link) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, netlink.Link) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Netlink_LinkSetUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LinkSetUp'
type Netlink_LinkSetUp_Call struct {
	*mock.Call
}

// LinkSetUp is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netlink.Link
func (_e *Netlink_Expecter) LinkSetUp(_a0 interface{}, _a1 interface{}) *Netlink_LinkSetUp_Call {
	return &Netlink_LinkSetUp_Call{Call: _e.mock.On("LinkSetUp", _a0, _a1)}
}

func (_c *Netlink_LinkSetUp_Call) Run(run func(_a0 context.Context, _a1 netlink.Link)) *Netlink_LinkSetUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netlink.Link))
	})
	return _c
}

func (_c *Netlink_LinkSetUp_Call) Return(_a0 error) *Netlink_LinkSetUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Netlink_LinkSetUp_Call) RunAndReturn(run func(context.Context, netlink.Link) error) *Netlink_LinkSetUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetlink creates a new instance of Netlink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetlink(t interface {
	mock.TestingT
	Cleanup(func())
}) *Netlink {
	mock := &Netlink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
